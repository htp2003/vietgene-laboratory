import { NotificationService } from '../services/staffService/notificationService';
import { Appointment } from '../types/appointment';


export class AppointmentNotificationIntegration {
  
  static async notifyNewAppointment(appointment: Appointment): Promise<void> {
    try {
      console.log('üîî Sending new appointment notification to staff...');
      
      await NotificationService.notifyStaffAboutNewAppointment(
        appointment.customerName,
        appointment.id
      );
      
      console.log('‚úÖ Staff notified about new appointment successfully');
    } catch (error) {
      console.error('‚ùå Failed to notify staff about new appointment:', error);
    }
  }
  static async notifyStatusChange(
    appointment: Appointment,
    newStatus: string,
    oldStatus?: string
  ): Promise<void> {
    try {
      console.log('üîî Sending status change notification to staff...');
      
      await NotificationService.notifyStaffAboutStatusChange(
        appointment.customerName,
        appointment.id,
        newStatus
      );
      
      console.log('‚úÖ Staff notified about status change successfully');
    } catch (error) {
      console.error('‚ùå Failed to notify staff about status change:', error);
    }
  }
  static async notifyUrgentAppointment(appointment: Appointment): Promise<void> {
    try {
      console.log('üö® Sending urgent appointment notification to staff...');
      
      // Get all staff users
      const staffUsers = await NotificationService.getAllStaffUsers();
      
      if (staffUsers.length === 0) {
        console.warn('‚ö†Ô∏è No staff users found for urgent notification');
        return;
      }
      
      // Create urgent notification for each staff member
      const urgentNotificationData = {
        title: 'üö® L·ªãch h·∫πn kh·∫©n c·∫•p',
        message: `Kh√°ch h√†ng ${appointment.customerName} ƒë√£ ƒë·∫∑t l·ªãch x√©t nghi·ªám ${appointment.legalType} - C·∫¶N X·ª¨ L√ù NGAY`,
        type: 'UrgentBooking',
        is_read: false
      };
      
      const promises = staffUsers.map(staff => 
        NotificationService.createNotification(staff.id, urgentNotificationData)
      );
      
      await Promise.all(promises);
      
      console.log('‚úÖ Staff notified about urgent appointment successfully');
    } catch (error) {
      console.error('‚ùå Failed to notify staff about urgent appointment:', error);
    }
  }
  static async notifyUpcomingAppointment(appointment: Appointment): Promise<void> {
    try {
      console.log('‚è∞ Sending upcoming appointment reminder to staff...');
      
      const appointmentDate = new Date(appointment.date);
      const timeSlot = appointment.time;
      
      await NotificationService.notifyStaffAboutStatusChange(
        appointment.customerName,
        appointment.id,
        'Upcoming'
      );
      
      console.log('‚úÖ Staff reminded about upcoming appointment successfully');
    } catch (error) {
      console.error('‚ùå Failed to send upcoming appointment reminder:', error);
    }
  }
  static async notifyAttentionRequired(
    appointment: Appointment,
    reason: string
  ): Promise<void> {
    try {
      console.log('‚ö†Ô∏è Sending attention required notification to staff...');
      
      // Get all staff users
      const staffUsers = await NotificationService.getAllStaffUsers();
      
      if (staffUsers.length === 0) {
        console.warn('‚ö†Ô∏è No staff users found for attention notification');
        return;
      }
      const attentionNotificationData = {
        title: '‚ö†Ô∏è C·∫ßn ch√∫ √Ω',
        message: `L·ªãch h·∫πn c·ªßa kh√°ch h√†ng ${appointment.customerName} c·∫ßn ch√∫ √Ω: ${reason}`,
        type: 'AttentionRequired',
        is_read: false
      };
      
      const promises = staffUsers.map(staff => 
        NotificationService.createNotification(staff.id, attentionNotificationData)
      );
      
      await Promise.all(promises);
      
      console.log('‚úÖ Staff notified about attention required successfully');
    } catch (error) {
      console.error('‚ùå Failed to notify staff about attention required:', error);
    }
  }
  static async notifyBatchAppointments(appointments: Appointment[]): Promise<void> {
    try {
      console.log('üì¶ Sending batch appointment notifications to staff...');
      
      const promises = appointments.map(appointment => 
        this.notifyNewAppointment(appointment)
      );
      
      await Promise.all(promises);
      
      console.log('‚úÖ Batch notifications sent successfully');
    } catch (error) {
      console.error('‚ùå Failed to send batch notifications:', error);
    }
  }
  static async sendDailySummary(): Promise<void> {
    try {
      console.log('üìä Sending daily appointment summary to staff...');
      const today = new Date().toISOString().split('T')[0];
      
      // Get all staff users
      const staffUsers = await NotificationService.getAllStaffUsers();
      
      if (staffUsers.length === 0) {
        console.warn('‚ö†Ô∏è No staff users found for daily summary');
        return;
      }
      
      // Create daily summary notification
      const summaryNotificationData = {
        title: 'üìä T·ªïng k·∫øt ng√†y',
        message: `T·ªïng k·∫øt l·ªãch h·∫πn ng√†y ${new Date().toLocaleDateString('vi-VN')}`,
        type: 'DailySummary',
        is_read: false
      };
      
      const promises = staffUsers.map(staff => 
        NotificationService.createNotification(staff.id, summaryNotificationData)
      );
      
      await Promise.all(promises);
      
      console.log('‚úÖ Daily summary sent to staff successfully');
    } catch (error) {
      console.error('‚ùå Failed to send daily summary:', error);
    }
  }
}

// Example usage in customer booking system:
/*
// When customer creates new appointment
const newAppointment = await createAppointment(appointmentData);

// Notify staff about new appointment
await AppointmentNotificationIntegration.notifyNewAppointment(newAppointment);

// If it's a legal DNA test, send urgent notification
if (newAppointment.legalType === 'Ph√°p L√Ω') {
  await AppointmentNotificationIntegration.notifyUrgentAppointment(newAppointment);
}
*/