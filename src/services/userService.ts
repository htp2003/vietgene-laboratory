// userService.ts - Fixed version
import axios from "axios";

const API_BASE_URL = "https://dna-service-se1857.onrender.com/dna_service";

// Create axios instance
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // Increased timeout
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    console.log(`üöÄ User API Request: ${config.method?.toUpperCase()} ${config.url}`);
    console.log('üì§ Request data:', config.data);
    
    // Add auth token if available
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('üîë Token attached:', token.substring(0, 20) + '...');
    } else {
      console.warn('‚ö†Ô∏è No token found in localStorage');
    }
    
    return config;
  },
  (error) => {
    console.error("‚ùå Request error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
apiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ User API Response: ${response.status} ${response.statusText}`);
    console.log('üì• Response data:', response.data);
    return response;
  },
  (error) => {
    console.error("‚ùå User API Response error:", error);
    
    // Handle token expiration
    if (error.response?.status === 401) {
      console.warn('üîí Token expired, redirecting to login');
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

// Role interface
export interface Role {
  name: string;
  description: string;
}

// User interface matching API response
export interface User {
  id: string;
  username: string;
  email: string;
  full_name: string;
  dob: string; // date format
  roles: Role[];
  
  // Additional fields for frontend compatibility
  fullName?: string;
  phone?: string;
  address?: string;
  role?: 'customer' | 'staff' | 'admin';
  createdAt?: Date;
  doctor_id?: number | null;
}

// User creation request interface
export interface UserCreationRequest {
  username: string;
  password: string;
  email: string;
  full_name: string;
  dob: string;
}

// User update request interface - FIXED to match API exactly
export interface UserUpdateRequest {
  username?: string;
  password?: string;
  email?: string;
  full_name?: string;
  dob?: string;
  roles?: string[]; // Array of role names like ["ROLE_ADMIN"]
}

// API Response interface
export interface ApiResponse<T> {
  code: number;
  message: string;
  result: T;
}

// HELPER: Transform user role from API to frontend format
function transformApiRoleToFrontend(apiRoles: Role[]): 'customer' | 'staff' | 'admin' {
  const roleName = apiRoles?.[0]?.name || 'ROLE_USER';
  switch (roleName) {
    case 'ROLE_ADMIN':
      return 'admin';
    case 'ROLE_STAFF':
      return 'staff';
    case 'ROLE_USER':
    default:
      return 'customer';
  }
}

// HELPER: Transform user data from API to frontend format
function transformApiUserToFrontend(apiUser: any): User {
  return {
    ...apiUser,
    fullName: apiUser.full_name,
    role: transformApiRoleToFrontend(apiUser.roles),
    createdAt: new Date(),
    phone: '',
    address: '',
    doctor_id: null,
  };
}

// User Service
export const userService = {
  // Get all users
  getAllUsers: async (): Promise<{ success: boolean; data?: User[]; message: string }> => {
    try {
      console.log("üë• Fetching all users...");
      
      const response = await apiClient.get<ApiResponse<User[]>>("/user");
      
      if (response.data.code === 200) {
        const transformedData = response.data.result.map(transformApiUserToFrontend);

        return {
          success: true,
          data: transformedData,
          message: "L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get all users error:", error);
      return handleApiError(error);
    }
  },

  // Get user by ID
  getUserById: async (userId: string): Promise<{ success: boolean; data?: User; message: string }> => {
    try {
      console.log(`üë§ Fetching user with ID: ${userId}...`);
      
      const response = await apiClient.get<ApiResponse<User>>(`/user/${userId}`);
      
      if (response.data.code === 200) {
        const transformedData = transformApiUserToFrontend(response.data.result);

        return {
          success: true,
          data: transformedData,
          message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get user by ID error:", error);
      return handleApiError(error);
    }
  },

  // Get user profile (current user)
  getUserProfile: async (): Promise<{ success: boolean; data?: User; message: string }> => {
    try {
      console.log("üë§ Fetching user profile...");
      
      const response = await apiClient.get<ApiResponse<User>>("/user/profile");
      
      if (response.data.code === 200) {
        const transformedData = transformApiUserToFrontend(response.data.result);

        return {
          success: true,
          data: transformedData,
          message: "L·∫•y th√¥ng tin profile th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin profile",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get user profile error:", error);
      return handleApiError(error);
    }
  },

  // Create new user
  createUser: async (userData: UserCreationRequest): Promise<{ success: boolean; data?: User; message: string }> => {
    try {
      console.log("‚ûï Creating new user...");
      
      const response = await apiClient.post<ApiResponse<User>>("/user/register", userData);
      
      if (response.data.code === 200 || response.data.code === 201) {
        const transformedData = transformApiUserToFrontend(response.data.result);

        return {
          success: true,
          data: transformedData,
          message: "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Create user error:", error);
      return handleApiError(error);
    }
  },

  // Create staff user
  createStaffUser: async (userData: UserCreationRequest): Promise<{ success: boolean; data?: User; message: string }> => {
    try {
      console.log("‚ûï Creating new staff user...");
      
      const response = await apiClient.post<ApiResponse<User>>("/user/register/staff", userData);
      
      if (response.data.code === 200 || response.data.code === 201) {
        const transformedData = transformApiUserToFrontend(response.data.result);

        return {
          success: true,
          data: transformedData,
          message: "T·∫°o nh√¢n vi√™n th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ t·∫°o nh√¢n vi√™n",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Create staff user error:", error);
      return handleApiError(error);
    }
  },

  // Update user - FIXED VERSION
  updateUser: async (userId: string, userData: UserUpdateRequest): Promise<{ success: boolean; data?: User; message: string }> => {
    try {
      console.log(`üìù Updating user with ID: ${userId}...`);
      console.log('üîç Original update data:', JSON.stringify(userData, null, 2));
      
      // Validate token first
      const token = localStorage.getItem("token");
      if (!token) {
        console.error('‚ùå No token found!');
        return {
          success: false,
          message: "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i"
        };
      }
      
      console.log('üîë Token exists:', token.substring(0, 20) + '...');
      
      // Validate input data
      if (!userData || Object.keys(userData).length === 0) {
        return {
          success: false,
          message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t"
        };
      }
      
      // Validate userId
      if (!userId || userId.trim() === '') {
        return {
          success: false,
          message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"
        };
      }
      
      // Prepare API request data - only send fields that have values
      const apiData: UserUpdateRequest = {};
      
      if (userData.username && userData.username.trim()) {
        apiData.username = userData.username.trim();
      }
      
      if (userData.email && userData.email.trim()) {
        apiData.email = userData.email.trim();
      }
      
      if (userData.full_name && userData.full_name.trim()) {
        apiData.full_name = userData.full_name.trim();
      }
      
      if (userData.dob && userData.dob.trim()) {
        // Ensure date format is correct (YYYY-MM-DD)
        const dateValue = userData.dob.trim();
        if (dateValue.match(/^\d{4}-\d{2}-\d{2}$/)) {
          apiData.dob = dateValue;
        } else {
          console.warn('‚ö†Ô∏è Invalid date format, skipping dob update');
        }
      }
      
      if (userData.roles && userData.roles.length > 0) {
        apiData.roles = userData.roles;
      }
      
      // Don't send password unless specifically provided
      if (userData.password && userData.password.trim()) {
        apiData.password = userData.password.trim();
      }
      
      console.log('üì§ Final API data being sent:', JSON.stringify(apiData, null, 2));
      
      // Make the API call
      const response = await apiClient.put<ApiResponse<User>>(`/user/${userId}`, apiData);
      
      console.log('‚úÖ Update response status:', response.status);
      console.log('üì• Update response data:', JSON.stringify(response.data, null, 2));
      
      // Check response
      if (response.data.code === 200) {
        const transformedData = transformApiUserToFrontend(response.data.result);
        console.log('‚úÖ Transformed user data:', transformedData);

        return {
          success: true,
          data: transformedData,
          message: response.data.message || "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng",
        };
      } else {
        console.error('‚ùå API returned error code:', response.data.code);
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Update user error:", error);
      
      if (error.response) {
        console.error("üì• Error response status:", error.response.status);
        console.error("üì• Error response data:", JSON.stringify(error.response.data, null, 2));
        console.error("üì§ Failed request config:", {
          url: error.config?.url,
          method: error.config?.method,
          data: error.config?.data,
          headers: {
            ...error.config?.headers,
            Authorization: error.config?.headers?.Authorization ? 'Bearer [HIDDEN]' : 'Missing'
          }
        });
        
        const status = error.response.status;
        const apiMessage = error.response.data?.message || error.response.statusText;
        
        switch (status) {
          case 400:
            return { 
              success: false, 
              message: `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${apiMessage}` 
            };
          case 401:
            localStorage.removeItem("token");
            localStorage.removeItem("user");
            return { 
              success: false, 
              message: "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i" 
            };
          case 403:
            return { 
              success: false, 
              message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng n√†y" 
            };
          case 404:
            return { 
              success: false, 
              message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" 
            };
          case 500:
            return { 
              success: false, 
              message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau" 
            };
          default:
            return { 
              success: false, 
              message: `L·ªói ${status}: ${apiMessage}` 
            };
        }
      } else if (error.request) {
        console.error("üì° Network error - no response received");
        return { 
          success: false, 
          message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng" 
        };
      } else {
        console.error("‚öôÔ∏è Request setup error:", error.message);
        return { 
          success: false, 
          message: `C√≥ l·ªói x·∫£y ra: ${error.message}` 
        };
      }
    }
  },

  // Delete user
  deleteUser: async (userId: string): Promise<{ success: boolean; message: string }> => {
    try {
      console.log(`üóëÔ∏è Deleting user with ID: ${userId}...`);
      
      const response = await apiClient.delete<ApiResponse<string>>(`/user/${userId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          message: response.data.message || "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Delete user error:", error);
      return handleApiError(error);
    }
  },
};

// Error handler helper
function handleApiError(error: any): { success: false; message: string } {
  if (error.response) {
    const status = error.response.status;
    const message = error.response.data?.message || error.response.statusText;

    switch (status) {
      case 400:
        return { success: false, message: `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${message}` };
      case 401:
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        return { success: false, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y" };
      case 403:
        return { success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y" };
      case 404:
        return { success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };
      case 409:
        return { success: false, message: "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i" };
      case 500:
        return { success: false, message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau" };
      default:
        return { success: false, message: `L·ªói ${status}: ${message}` };
    }
  } else if (error.request) {
    return { success: false, message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server" };
  } else {
    return { success: false, message: `C√≥ l·ªói x·∫£y ra: ${error.message}` };
  }
}

export default userService;