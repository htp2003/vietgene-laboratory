import axios from "axios";

const API_BASE_URL = "https://dna-service-se1857.onrender.com/dna_service";

// Create axios instance
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 15000,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    console.log(`üìú Certificate API Request: ${config.method?.toUpperCase()} ${config.url}`);
    
    // Add auth token if available
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('üîë Token attached:', token.substring(0, 20) + '...');
    } else {
      console.warn('‚ö†Ô∏è No token found in localStorage');
    }
    
    return config;
  },
  (error) => {
    console.error("‚ùå Request error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
apiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Certificate API Response: ${response.status} ${response.statusText}`);
    console.log("üì• Response data:", response.data);
    return response;
  },
  (error) => {
    console.error("‚ùå Certificate API Response error:", error);
    
    // Handle token expiration
    if (error.response?.status === 401) {
      console.warn('üîí Token expired, redirecting to login');
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

export interface DoctorCertificate {
  id: string;
  certificateName: string;
  licenseNumber: string;
  issuedBy: string;
  issueDate: string;
  expiryDate: string;
  doctorId: string;
  createdAt: string;
  updatedAt?: string;
}

export interface CertificateRequest {
  certificateName: string;
  licenseNumber: string;
  issuedBy: string;
  issueDate: string;
  expiryDate: string;
  doctorId: string;
}

// API Response interface
export interface ApiResponse<T> {
  code: number;
  message: string;
  result: T;
}

export const doctorCertificateService = {
  // Get all certificates
  getAllCertificates: async (): Promise<{ success: boolean; data?: DoctorCertificate[]; message: string }> => {
    try {
      console.log("üìú Fetching all certificates...");
      
      const response = await apiClient.get<ApiResponse<DoctorCertificate[]>>("/certificates");
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "L·∫•y danh s√°ch ch·ª©ng ch·ªâ th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ch·ª©ng ch·ªâ",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get all certificates error:", error);
      return handleApiError(error);
    }
  },

  // Get certificates by doctor ID
  getCertificatesByDoctorId: async (doctorId: string): Promise<{ success: boolean; data?: DoctorCertificate[]; message: string }> => {
    try {
      console.log(`üìú Fetching certificates for doctor ID: ${doctorId}...`);
      
      const response = await apiClient.get<ApiResponse<DoctorCertificate[]>>(`/certificates/doctor/${doctorId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "L·∫•y danh s√°ch ch·ª©ng ch·ªâ th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ch·ª©ng ch·ªâ",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get certificates by doctor ID error:", error);
      return handleApiError(error);
    }
  },

  // Get certificate by ID
  getCertificateById: async (certificateId: string): Promise<{ success: boolean; data?: DoctorCertificate; message: string }> => {
    try {
      console.log(`üìú Fetching certificate with ID: ${certificateId}...`);
      
      const response = await apiClient.get<ApiResponse<DoctorCertificate>>(`/certificates/${certificateId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "L·∫•y th√¥ng tin ch·ª©ng ch·ªâ th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ch·ª©ng ch·ªâ",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get certificate by ID error:", error);
      return handleApiError(error);
    }
  },

  // Create new certificate
  createCertificate: async (certificateData: CertificateRequest): Promise<{ success: boolean; data?: DoctorCertificate; message: string }> => {
    try {
      console.log("‚ûï Creating new certificate...");
      console.log("üì§ Data being sent:", certificateData);

      // Validate required fields
      if (!certificateData.certificateName?.trim()) {
        return { success: false, message: "T√™n ch·ª©ng ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }
      if (!certificateData.licenseNumber?.trim()) {
        return { success: false, message: "S·ªë gi·∫•y ph√©p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }
      if (!certificateData.issuedBy?.trim()) {
        return { success: false, message: "N∆°i c·∫•p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }
      if (!certificateData.issueDate) {
        return { success: false, message: "Ng√†y c·∫•p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }
      if (!certificateData.expiryDate) {
        return { success: false, message: "Ng√†y h·∫øt h·∫°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }
      if (!certificateData.doctorId?.trim()) {
        return { success: false, message: "ID b√°c sƒ© kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }

      // Validate dates
      const issueDate = new Date(certificateData.issueDate);
      const expiryDate = new Date(certificateData.expiryDate);
      
      if (expiryDate <= issueDate) {
        return { success: false, message: "Ng√†y h·∫øt h·∫°n ph·∫£i sau ng√†y c·∫•p" };
      }
      
      const response = await apiClient.post<ApiResponse<DoctorCertificate>>("/certificates", certificateData);
      
      if (response.data.code === 200 || response.data.code === 201) {
        return {
          success: true,
          data: response.data.result,
          message: "T·∫°o ch·ª©ng ch·ªâ th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ t·∫°o ch·ª©ng ch·ªâ",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Create certificate error:", error);
      return handleApiError(error);
    }
  },

  // Update certificate
  updateCertificate: async (certificateId: string, certificateData: Partial<CertificateRequest>): Promise<{ success: boolean; data?: DoctorCertificate; message: string }> => {
    try {
      console.log(`üìù Updating certificate with ID: ${certificateId}...`);
      console.log("üì§ Data being sent:", certificateData);
      
      // Validate inputs
      if (!certificateId || certificateId.trim() === '') {
        return {
          success: false,
          message: "ID ch·ª©ng ch·ªâ kh√¥ng h·ª£p l·ªá"
        };
      }

      // Validate dates if both are provided
      if (certificateData.issueDate && certificateData.expiryDate) {
        const issueDate = new Date(certificateData.issueDate);
        const expiryDate = new Date(certificateData.expiryDate);
        
        if (expiryDate <= issueDate) {
          return { success: false, message: "Ng√†y h·∫øt h·∫°n ph·∫£i sau ng√†y c·∫•p" };
        }
      }
      
      const response = await apiClient.put<ApiResponse<DoctorCertificate>>(`/certificates/${certificateId}`, certificateData);
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "C·∫≠p nh·∫≠t ch·ª©ng ch·ªâ th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch·ª©ng ch·ªâ",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Update certificate error:", error);
      return handleApiError(error);
    }
  },

  // Delete certificate
  deleteCertificate: async (certificateId: string): Promise<{ success: boolean; message: string }> => {
    try {
      console.log(`üóëÔ∏è Deleting certificate with ID: ${certificateId}...`);
      
      if (!certificateId || certificateId.trim() === '') {
        return {
          success: false,
          message: "ID ch·ª©ng ch·ªâ kh√¥ng h·ª£p l·ªá"
        };
      }
      
      const response = await apiClient.delete<ApiResponse<any>>(`/certificates/${certificateId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          message: "X√≥a ch·ª©ng ch·ªâ th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ x√≥a ch·ª©ng ch·ªâ",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Delete certificate error:", error);
      return handleApiError(error);
    }
  },
};

// Error handler helper
function handleApiError(error: any): { success: false; message: string } {
  if (error.response) {
    const status = error.response.status;
    const message = error.response.data?.message || error.response.statusText;

    switch (status) {
      case 400:
        return { success: false, message: `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${message}` };
      case 401:
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        return { success: false, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y" };
      case 403:
        return { success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y" };
      case 404:
        return { success: false, message: "Kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ" };
      case 409:
        return { success: false, message: "S·ªë gi·∫•y ph√©p ƒë√£ t·ªìn t·∫°i" };
      case 500:
        return { success: false, message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau" };
      default:
        return { success: false, message: `L·ªói ${status}: ${message}` };
    }
  } else if (error.request) {
    return { success: false, message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server" };
  } else {
    return { success: false, message: `C√≥ l·ªói x·∫£y ra: ${error.message}` };
  }
}

export default doctorCertificateService;