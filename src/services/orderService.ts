import axios from "axios";

const API_BASE_URL = "https://dna-service-se1857.onrender.com/dna_service";

// ‚úÖ OPTIMIZED: Increased timeout and better config
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // Increased to 30s
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// ‚úÖ OPTIMIZED: Better request interceptor
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // Add request logging for debugging
    console.log(
      `üîÑ API Request: ${config.method?.toUpperCase()} ${config.url}`
    );
    return config;
  },
  (error) => {
    console.error("‚ùå Request interceptor error:", error);
    return Promise.reject(error);
  }
);

// ‚úÖ OPTIMIZED: Better response interceptor with retry logic
apiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.config.url} - ${response.status}`);
    return response;
  },
  async (error) => {
    const config = error.config;

    // Retry logic for network errors
    if (!config.__retryCount) {
      config.__retryCount = 0;
    }

    if (
      config.__retryCount < 2 &&
      (error.code === "ECONNABORTED" || error.response?.status >= 500)
    ) {
      config.__retryCount += 1;
      console.log(
        `üîÑ Retrying request (${config.__retryCount}/2): ${config.url}`
      );
      await new Promise((resolve) =>
        setTimeout(resolve, 1000 * config.__retryCount)
      );
      return apiClient(config);
    }

    console.error("‚ùå API Error:", error.response?.data || error.message);
    return Promise.reject(error);
  }
);

// ‚úÖ UPDATED V9 Interfaces
export interface Doctor {
  userId: string;
  doctorId: string;
  doctorCode: string;
  doctorName: string;
  doctorEmail: string;
  doctorPhone: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface TimeSlot {
  id: string;
  dayOfWeek: number;
  startTime: string;
  endTime: string;
  isAvailable: boolean;
  createdAt: string;
  doctorId: string;
}

export interface Sample {
  id: string;
  sample_code: string;
  sample_type: string;
  collection_method: string;
  collection_date?: string;
  received_date?: string;
  status: string;
  shipping_tracking?: string;
  notes?: string;
  sample_quality?: string;
  userId: string;
  sampleKitsId: string; // V9: Single kit ID reference
}

export interface SampleKit {
  id: string;
  kit_code: string;
  kit_type: string;
  status: string;
  shipper_data?: string;
  delivered_date?: string;
  tracking_number?: number;
  shipping_address: string;
  expiry_date?: string;
  instruction?: string;
  createdAt: string;
  updatedAt?: string;
  samplesId: string; // V9: Single sample ID reference
  userId: string;
  orderId: string; // V9: Direct order reference
}

export interface CreateOrderRequest {
  customerInfo: {
    fullName: string;
    phone: string;
    email: string;
    address: string;
    identityCard: string;
  };
  serviceInfo: {
    serviceId: string;
    quantity: number;
    collectionMethod: "home" | "facility";
    appointmentDate?: string;
    appointmentTime?: string;
    doctorId?: string;
    timeSlotId?: string;
    notes?: string;
  };
  participantInfo: {
    participants: Array<{
      name: string;
      relationship: string;
      age: string;
    }>;
  };
  paymentInfo: {
    method: "cash" | "card" | "transfer";
  };
}

class OrderService {
  // ===== UTILITY METHODS =====
  private getCurrentUserId(): string {
    try {
      const user = JSON.parse(localStorage.getItem("user") || "{}");
      return user.id || "unknown-user";
    } catch {
      return "unknown-user";
    }
  }

  private generateUniqueCode(prefix: string, orderId?: string): string {
    const timestamp = Date.now().toString().slice(-6);
    const random = Math.floor(Math.random() * 1000)
      .toString()
      .padStart(3, "0");
    const orderSuffix = orderId ? orderId.slice(-4) : "";
    return `${prefix}_${timestamp}_${random}_${orderSuffix}`;
  }

  // ‚úÖ OPTIMIZED: Parallel API calls for better performance
  async getAllDoctors(): Promise<Doctor[]> {
    try {
      console.log("üîç Fetching doctors from API...");
      const startTime = Date.now();

      const response = await apiClient.get("/doctors");

      console.log(`‚úÖ Doctors API completed in ${Date.now() - startTime}ms`);

      if (response.data.code === 200) {
        const doctors = response.data.result || [];
        console.log("‚úÖ Doctors loaded:", doctors.length);
        return doctors.filter((doctor: Doctor) => doctor.isActive !== false);
      }

      throw new Error("Failed to fetch doctors");
    } catch (error: any) {
      console.error(
        "‚ùå Doctors API failed:",
        error.response?.data || error.message
      );
      throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°c sƒ©. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  }

  async getDoctorTimeSlots(doctorId: string): Promise<TimeSlot[]> {
    try {
      console.log("üîç Fetching time slots for doctor:", doctorId);
      const startTime = Date.now();

      const response = await apiClient.get(
        `/doctor-time-slots/doctor/${doctorId}`
      );

      console.log(`‚úÖ Time slots API completed in ${Date.now() - startTime}ms`);

      if (response.data.code === 200) {
        const timeSlots = response.data.result || [];
        console.log("‚úÖ Time slots loaded:", timeSlots.length);
        return timeSlots.filter((slot: TimeSlot) => slot.isAvailable);
      }

      throw new Error("Failed to fetch time slots");
    } catch (error: any) {
      console.error(
        "‚ùå Time slots API failed:",
        error.response?.data || error.message
      );
      throw new Error(
        "Kh√¥ng th·ªÉ t·∫£i l·ªãch kh√°m c·ªßa b√°c sƒ©. Vui l√≤ng th·ª≠ l·∫°i sau."
      );
    }
  }

  // ‚úÖ OPTIMIZED: Better user handling
  private async handleUserRegistration(userData: {
    fullName: string;
    phone: string;
    email: string;
  }): Promise<string> {
    try {
      const currentUser = JSON.parse(localStorage.getItem("user") || "{}");
      const token = localStorage.getItem("token");

      console.log("üîç Current user:", currentUser);

      if (currentUser.id && token) {
        console.log("‚úÖ Using current logged in user:", currentUser.id);
        return currentUser.id;
      }

      console.log("‚ö†Ô∏è No user logged in, creating guest order");
      return "guest_user_" + Date.now();
    } catch (error: any) {
      console.error("‚ùå User handling failed:", error);
      return "guest_user_" + Date.now();
    }
  }

  // ‚úÖ CORE ORDER METHODS - Optimized
  async createOrder(orderData: {
    customerId: string;
    serviceId: string;
    quantity: number;
    collectionMethod: string;
    notes?: string;
  }): Promise<{ orderId: string }> {
    try {
      const startTime = Date.now();
      const now = new Date().toISOString();

      const orderPayload = {
        order_code: Math.floor(Math.random() * 900000) + 100000,
        status: "pending",
        total_amount: 2500000 * orderData.quantity,
        payment_method: "transfer",
        payment_status: "pending",
        payment_date: null,
        transaction_id: null,
        notes: orderData.notes || "",
        createdAt: now,
        updatedAt: now,
      };

      console.log("üì§ Creating order:", orderPayload);
      const response = await apiClient.post("/orders", orderPayload);

      console.log(`‚úÖ Order creation completed in ${Date.now() - startTime}ms`);

      if (response.data.code === 200) {
        const orderId = response.data.result.orderId || response.data.result.id;
        console.log("‚úÖ Order created:", orderId);
        return { orderId };
      }

      throw new Error(
        `Order creation failed: ${response.data.message || "Unknown error"}`
      );
    } catch (error: any) {
      console.error("‚ùå Order creation error:", error.response?.data);
      throw new Error(
        "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng: " +
          (error.response?.data?.message || error.message)
      );
    }
  }

  async createOrderDetail(
    orderId: string,
    serviceId: string,
    orderDetailData: {
      quantity: number;
      unitPrice: number;
      notes?: string;
    }
  ): Promise<{ orderDetailId: string }> {
    try {
      const startTime = Date.now();

      const payload = {
        quantity: orderDetailData.quantity,
        unit_price: orderDetailData.unitPrice,
        subtotal: orderDetailData.quantity * orderDetailData.unitPrice,
        note: orderDetailData.notes || "",
      };

      console.log("üì§ Creating order detail:", payload);
      const response = await apiClient.post(
        `/order-details/${orderId}/${serviceId}`,
        payload
      );

      console.log(
        `‚úÖ Order detail creation completed in ${Date.now() - startTime}ms`
      );

      if (response.data.code === 200) {
        console.log("‚úÖ Order detail created:", response.data.result.id);
        return { orderDetailId: response.data.result.id };
      }

      throw new Error(
        `Order detail creation failed: ${
          response.data.message || "Unknown error"
        }`
      );
    } catch (error: any) {
      console.error("‚ùå Order detail error:", error.response?.data);
      throw new Error(
        "Kh√¥ng th·ªÉ t·∫°o chi ti·∫øt ƒë∆°n h√†ng: " +
          (error.response?.data?.message || error.message)
      );
    }
  }

  // ‚úÖ OPTIMIZED: Parallel participant creation
  async addOrderParticipants(
    orderId: string,
    participants: Array<{
      participantName: string;
      relationship: string;
      age: number;
      notes?: string;
    }>
  ): Promise<{ participantIds: string[] }> {
    try {
      console.log("üë• Adding participants in parallel:", participants.length);
      const startTime = Date.now();

      // Create all participants in parallel
      const participantPromises = participants.map(
        async (participantData, index) => {
          try {
            const payload = {
              participant_name: participantData.participantName,
              relationship: participantData.relationship,
              age: participantData.age,
              note: participantData.notes || "",
            };

            const response = await apiClient.post(
              `/OrderParticipants/${orderId}`,
              payload
            );

            if (response.data.code === 200) {
              console.log(
                `‚úÖ Participant ${index + 1} added:`,
                response.data.result.id
              );
              return response.data.result.id;
            }

            throw new Error(`Participant ${index + 1} creation failed`);
          } catch (error) {
            console.error(`‚ùå Participant ${index + 1} error:`, error);
            return null;
          }
        }
      );

      const participantIds = await Promise.allSettled(participantPromises);
      const successfulIds = participantIds
        .filter((result) => result.status === "fulfilled" && result.value)
        .map((result) => (result as PromiseFulfilledResult<string>).value);

      console.log(
        `‚úÖ Participants creation completed in ${Date.now() - startTime}ms`
      );
      console.log(
        `‚úÖ ${successfulIds.length}/${participants.length} participants added successfully`
      );

      return { participantIds: successfulIds };
    } catch (error: any) {
      console.error("‚ùå Participants batch error:", error);
      throw new Error(
        "Kh√¥ng th·ªÉ th√™m ng∆∞·ªùi tham gia: " + (error.message || "Unknown error")
      );
    }
  }

  async createAppointment(
    orderId: string,
    appointmentData: {
      appointmentDate: string;
      appointmentTime: string;
      doctorId: string;
      timeSlotId: string;
      notes?: string;
    }
  ): Promise<{ appointmentId: string }> {
    try {
      const startTime = Date.now();

      const payload = {
        appointment_date: appointmentData.appointmentDate + "T03:24:55.300Z",
        appointment_type: "G·∫∑p ƒë·ªÉ t∆∞ v·∫•n",
        status: true,
        notes: appointmentData.notes || "kh√¥ng c√≥",
        doctor_time_slot: appointmentData.timeSlotId,
      };

      console.log("üì§ Creating appointment:", payload);
      const response = await apiClient.post(`/appointment/${orderId}`, payload);

      console.log(
        `‚úÖ Appointment creation completed in ${Date.now() - startTime}ms`
      );

      if (response.data.code === 200) {
        console.log("‚úÖ Appointment created:", response.data.result.id);
        return { appointmentId: response.data.result.id };
      }

      throw new Error(`Appointment creation failed: ${response.data.message}`);
    } catch (error: any) {
      console.error("‚ùå Appointment creation failed:", error.response?.data);
      throw new Error(
        "Kh√¥ng th·ªÉ t·∫°o l·ªãch h·∫πn: " +
          (error.response?.data?.message || error.message)
      );
    }
  }

  // ‚úÖ V9 CORRECTED: Sample Kit creation (FIRST)
  async createSampleKitsForOrder(
    orderId: string,
    participants: Array<{ name: string; relationship: string; age: string }>,
    shippingAddress: string,
    collectionMethod: "home" | "facility" = "home"
  ): Promise<SampleKit[]> {
    try {
      console.log("üì¶ Creating sample kits for order:", orderId);
      console.log("üë• Participants:", participants.length);
      const startTime = Date.now();

      // ‚úÖ OPTIMIZED: Create all kits in parallel
      const kitPromises = participants.map(async (participant, index) => {
        try {
          const kitCode =
            this.generateUniqueCode("KIT", orderId) + `_P${index + 1}`;

          const payload = {
            kit_code: kitCode,
            kit_type: "DNA_TEST_KIT",
            status: collectionMethod === "home" ? "ordered" : "ready",
            shipping_address: shippingAddress,
            instruction: this.getKitInstructions(
              collectionMethod,
              participant.name
            ),
            orderId: orderId, // V9: Direct order reference

            // V9 Workarounds for required fields
            samplesId: "pending", // Will be updated when sample is created
            delivered_date:
              collectionMethod === "home"
                ? new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString()
                : new Date().toISOString(),
            tracking_number: Math.floor(Math.random() * 900000) + 100000,
          };

          console.log(
            `üì¶ Creating kit ${index + 1}/${participants.length} for ${
              participant.name
            }`
          );
          const response = await apiClient.post("/sample-kits", payload);

          if (response.data.code === 200) {
            console.log(
              `‚úÖ Kit ${index + 1} created:`,
              response.data.result.id
            );
            return response.data.result;
          }

          throw new Error(`Kit creation failed for ${participant.name}`);
        } catch (error) {
          console.error(
            `‚ùå Kit creation error for participant ${index + 1}:`,
            error
          );
          return null;
        }
      });

      const kitResults = await Promise.allSettled(kitPromises);
      const successfulKits = kitResults
        .filter((result) => result.status === "fulfilled" && result.value)
        .map((result) => (result as PromiseFulfilledResult<SampleKit>).value);

      console.log(
        `‚úÖ Sample kits creation completed in ${Date.now() - startTime}ms`
      );
      console.log(
        `‚úÖ ${successfulKits.length}/${participants.length} kits created successfully`
      );

      return successfulKits;
    } catch (error: any) {
      console.error("‚ùå Error in createSampleKitsForOrder:", error);
      throw new Error("Kh√¥ng th·ªÉ t·∫°o sample kits. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }

  // ‚úÖ V9: Sample creation (AFTER kits)
  async createSamplesForKits(sampleKits: SampleKit[]): Promise<Sample[]> {
    try {
      console.log("üß¨ Creating samples for kits:", sampleKits.length);
      const startTime = Date.now();
      const userId = this.getCurrentUserId();

      // ‚úÖ OPTIMIZED: Create all samples in parallel
      const samplePromises = sampleKits.map(async (kit, index) => {
        try {
          const sampleCode = kit.kit_code.replace("KIT_", "SAMPLE_");

          const payload = {
            sample_code: sampleCode,
            sample_type: "DNA",
            collection_method: "pending",
            status: "pending",
            userId: userId,
            sampleKitsId: kit.id, // V9: Single kit reference
            notes: `Sample for kit ${kit.kit_code}`,
          };

          console.log(
            `üß¨ Creating sample ${index + 1}/${sampleKits.length} for kit: ${
              kit.kit_code
            }`
          );
          const response = await apiClient.post("/samples", payload);

          if (response.data.code === 200) {
            const sample = response.data.result;
            console.log(`‚úÖ Sample ${index + 1} created:`, sample.id);

            // Update kit with sample ID (fire and forget)
            this.updateSampleKitWithSampleId(kit.id, sample.id).catch((err) =>
              console.warn("‚ö†Ô∏è Could not update kit with sample ID:", err)
            );

            return sample;
          }

          throw new Error(`Sample creation failed for kit ${kit.kit_code}`);
        } catch (error) {
          console.error(
            `‚ùå Sample creation error for kit ${index + 1}:`,
            error
          );
          return null;
        }
      });

      const sampleResults = await Promise.allSettled(samplePromises);
      const successfulSamples = sampleResults
        .filter((result) => result.status === "fulfilled" && result.value)
        .map((result) => (result as PromiseFulfilledResult<Sample>).value);

      console.log(
        `‚úÖ Samples creation completed in ${Date.now() - startTime}ms`
      );
      console.log(
        `‚úÖ ${successfulSamples.length}/${sampleKits.length} samples created successfully`
      );

      return successfulSamples;
    } catch (error: any) {
      console.error("‚ùå Error in createSamplesForKits:", error);
      throw new Error("Kh√¥ng th·ªÉ t·∫°o samples. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }

  // Helper method to update kit with sample ID
  private async updateSampleKitWithSampleId(
    kitId: string,
    sampleId: string
  ): Promise<void> {
    try {
      await apiClient.put(`/sample-kits/${kitId}`, { samplesId: sampleId });
      console.log("‚úÖ Updated kit with sample ID:", kitId, "->", sampleId);
    } catch (error) {
      console.warn("‚ö†Ô∏è Could not update kit with sample ID:", error);
    }
  }

  // Helper method for kit instructions
  private getKitInstructions(
    collectionMethod: string,
    participantName?: string
  ): string {
    const name = participantName || "ng∆∞·ªùi tham gia";

    if (collectionMethod === "home") {
      return `H∆∞·ªõng d·∫´n thu m·∫´u t·∫°i nh√† cho ${name}:
1. R·ª≠a tay s·∫°ch s·∫Ω tr∆∞·ªõc khi thu m·∫´u
2. Kh√¥ng ƒÉn u·ªëng, ƒë√°nh rƒÉng trong 30 ph√∫t tr∆∞·ªõc khi thu m·∫´u
3. L·∫•y tƒÉm b√¥ng, ch√† nh·∫π v√†o m√° trong 10-15 gi√¢y
4. Cho tƒÉm b√¥ng v√†o ·ªëng ƒë·ª±ng m·∫´u v√† ƒë·∫≠y ch·∫∑t
5. Ghi t√™n ${name} l√™n nh√£n
6. B·∫£o qu·∫£n ·ªü nhi·ªát ƒë·ªô ph√≤ng, tr√°nh √°nh s√°ng tr·ª±c ti·∫øp
7. G·ª≠i v·ªÅ ph√≤ng lab trong v√≤ng 7 ng√†y`;
    } else {
      return `H∆∞·ªõng d·∫´n thu m·∫´u t·∫°i c∆° s·ªü cho ${name}:
1. ƒê·∫øn ƒë√∫ng gi·ªù h·∫πn ƒë√£ ƒë·∫∑t
2. Mang theo CMND/CCCD v√† gi·∫•y t·ªù li√™n quan
3. Nh√¢n vi√™n s·∫Ω h∆∞·ªõng d·∫´n v√† h·ªó tr·ª£ thu m·∫´u
4. M·∫´u s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ngay t·∫°i ph√≤ng lab`;
    }
  }

  // ‚úÖ OPTIMIZED: Payment processing
  async processPayment(
    orderId: string,
    paymentData: {
      method: "cash" | "card" | "transfer";
      amount: number;
    }
  ): Promise<{ success: boolean; transactionId?: string; message: string }> {
    console.log("üí≥ Processing payment...");
    const startTime = Date.now();

    const messages = {
      transfer: `Vui l√≤ng chuy·ªÉn kho·∫£n ${new Intl.NumberFormat("vi-VN").format(
        paymentData.amount
      )}ƒë v√†o:\n\nüè¶ Ng√¢n h√†ng: Vietcombank\nüí≥ STK: 1234567890\nüë§ Ch·ªß TK: VIET GENE LAB\nüìù N·ªôi dung: ORDER${orderId.slice(
        -6
      )}`,
      cash: "Thanh to√°n ti·ªÅn m·∫∑t khi nh·∫≠n d·ªãch v·ª•. Nh√¢n vi√™n s·∫Ω li√™n h·ªá x√°c nh·∫≠n th·ªùi gian.",
      card: "Thanh to√°n th·∫ª t√≠n d·ª•ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o qua email.",
    };

    // Simulate processing delay
    await new Promise((resolve) => setTimeout(resolve, 500));

    // Update order payment info (fire and forget for speed)
    const updatePayload = {
      payment_method: paymentData.method,
      payment_status: paymentData.method === "cash" ? "pending" : "paid",
      total_amount: paymentData.amount,
    };

    console.log("üì§ Updating order payment info:", updatePayload);
    apiClient
      .put(`/orders/${orderId}`, updatePayload)
      .catch((error) =>
        console.warn("‚ö†Ô∏è Could not update order payment info:", error)
      );

    console.log(
      `‚úÖ Payment processing completed in ${Date.now() - startTime}ms`
    );

    return {
      success: true,
      transactionId: "TXN_" + Date.now(),
      message: messages[paymentData.method],
    };
  }

  // ‚úÖ SUPER OPTIMIZED: Complete order creation with parallel processing
  async createCompleteOrder(orderData: CreateOrderRequest): Promise<string> {
    console.log("üöÄ Starting OPTIMIZED complete order creation flow...");
    const overallStartTime = Date.now();

    try {
      // Step 1: Handle user registration
      console.log("üë§ Step 1: Handling user...");
      const userId = await this.handleUserRegistration(orderData.customerInfo);

      // Step 2: Create main order
      console.log("üì¶ Step 2: Creating order...");
      const orderResult = await this.createOrder({
        customerId: userId,
        serviceId: orderData.serviceInfo.serviceId,
        quantity: orderData.serviceInfo.quantity,
        collectionMethod: orderData.serviceInfo.collectionMethod,
        notes: orderData.serviceInfo.notes,
      });
      const orderId = orderResult.orderId;

      // ‚úÖ OPTIMIZED: Steps 3-7 run in parallel where possible
      console.log("üöÄ Steps 3-7: Parallel processing...");

      const results = await Promise.allSettled([
        // Step 3: Add order details
        this.createOrderDetail(orderId, orderData.serviceInfo.serviceId, {
          quantity: orderData.serviceInfo.quantity,
          unitPrice: 2500000,
          notes: orderData.serviceInfo.notes,
        }),

        // Step 4: Add participants (parallel internally)
        this.addOrderParticipants(
          orderId,
          orderData.participantInfo.participants.map((p) => ({
            participantName: p.name,
            relationship: p.relationship,
            age: parseInt(p.age),
            notes: "",
          }))
        ),

        // Step 5: Create appointment (if needed)
        orderData.serviceInfo.collectionMethod === "facility" &&
        orderData.serviceInfo.appointmentDate &&
        orderData.serviceInfo.doctorId &&
        orderData.serviceInfo.timeSlotId
          ? this.createAppointment(orderId, {
              appointmentDate: orderData.serviceInfo.appointmentDate,
              appointmentTime: orderData.serviceInfo.appointmentTime || "09:00",
              doctorId: orderData.serviceInfo.doctorId,
              timeSlotId: orderData.serviceInfo.timeSlotId,
              notes: orderData.serviceInfo.notes,
            })
          : Promise.resolve(null),

        // Step 6: Process payment
        this.processPayment(orderId, {
          method: orderData.paymentInfo.method,
          amount: 2500000 * orderData.serviceInfo.quantity,
        }),
      ]);

      // Check results
      const [
        orderDetailResult,
        participantsResult,
        appointmentResult,
        paymentResult,
      ] = results;

      if (orderDetailResult.status === "fulfilled") {
        console.log("‚úÖ Order details created");
      } else {
        console.warn("‚ö†Ô∏è Order details failed:", orderDetailResult.reason);
      }

      if (participantsResult.status === "fulfilled") {
        console.log("‚úÖ Participants added");
      } else {
        console.warn("‚ö†Ô∏è Participants failed:", participantsResult.reason);
      }

      if (appointmentResult.status === "fulfilled" && appointmentResult.value) {
        console.log("‚úÖ Appointment created");
      } else if (orderData.serviceInfo.collectionMethod === "facility") {
        console.warn("‚ö†Ô∏è Appointment failed:", appointmentResult);
      }

      if (paymentResult.status === "fulfilled") {
        console.log("‚úÖ Payment processed");
      } else {
        console.warn("‚ö†Ô∏è Payment failed:", paymentResult.reason);
      }

      // ‚úÖ Step 7: Create sample kits (after order is established)
      console.log("üì¶ Step 7: Creating sample kits...");
      try {
        const sampleKits = await this.createSampleKitsForOrder(
          orderId,
          orderData.participantInfo.participants,
          orderData.customerInfo.address,
          orderData.serviceInfo.collectionMethod
        );
        console.log(`‚úÖ ${sampleKits.length} sample kits created`);
      } catch (error) {
        console.warn("‚ö†Ô∏è Sample kits creation failed:", error);
      }

      const totalTime = Date.now() - overallStartTime;
      console.log(`üéâ Order creation completed in ${totalTime}ms!`);

      return orderId;
    } catch (error: any) {
      const totalTime = Date.now() - overallStartTime;
      console.error(`‚ùå Order creation failed after ${totalTime}ms:`, error);
      throw new Error(
        "C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng: " +
          (error.message || "Vui l√≤ng th·ª≠ l·∫°i sau")
      );
    }
  }

  // ‚úÖ OPTIMIZED: Get order data with parallel fetching
  async getCompleteOrderData(orderId: string): Promise<any> {
    try {
      console.log("üîç Fetching complete order data for:", orderId);
      const startTime = Date.now();

      // ‚úÖ OPTIMIZED: Fetch all data in parallel
      const [
        orderResponse,
        orderDetailsResponse,
        participantsResponse,
        appointmentsResponse,
        sampleKitsResponse,
      ] = await Promise.allSettled([
        apiClient.get(`/orders/${orderId}`),
        apiClient.get(`/order-details/${orderId}/all`),
        apiClient.get(`/OrderParticipants/order/${orderId}`),
        apiClient.get(`/appointment/all`),
        apiClient.get(`/sample-kits/order/${orderId}`), // V9: Direct endpoint
      ]);

      // Process results
      let order = null;
      let orderDetails = [];
      let participants = [];
      let appointment = null;
      let sampleKits = [];
      let samples = [];

      // Process Order
      if (
        orderResponse.status === "fulfilled" &&
        orderResponse.value.data.code === 200
      ) {
        order = orderResponse.value.data.result;
        console.log("‚úÖ Order loaded");
      } else {
        throw new Error("Order not found");
      }

      // Process Order Details
      if (
        orderDetailsResponse.status === "fulfilled" &&
        orderDetailsResponse.value.data.code === 200
      ) {
        orderDetails = orderDetailsResponse.value.data.result || [];
        console.log("‚úÖ Order details loaded:", orderDetails.length);
      }

      // Process Participants
      if (
        participantsResponse.status === "fulfilled" &&
        participantsResponse.value.data.code === 200
      ) {
        participants = participantsResponse.value.data.result || [];
        console.log("‚úÖ Participants loaded:", participants.length);
      }

      // Process Appointments
      if (
        appointmentsResponse.status === "fulfilled" &&
        appointmentsResponse.value.data.code === 200
      ) {
        const allAppointments = appointmentsResponse.value.data.result || [];
        appointment = allAppointments.find(
          (app: any) => app.orderId === orderId
        );
        console.log("‚úÖ Appointment found:", !!appointment);
      }

      // Process Sample Kits (V9)
      if (
        sampleKitsResponse.status === "fulfilled" &&
        sampleKitsResponse.value.data.code === 200
      ) {
        sampleKits = sampleKitsResponse.value.data.result || [];
        console.log("‚úÖ Sample kits loaded:", sampleKits.length);

        // ‚úÖ OPTIMIZED: Fetch samples for kits in parallel
        if (sampleKits.length > 0) {
          const samplePromises = sampleKits.map(async (kit: SampleKit) => {
            if (kit.samplesId && kit.samplesId !== "pending") {
              try {
                const sampleResponse = await apiClient.get(
                  `/samples/${kit.samplesId}`
                );
                if (sampleResponse.data.code === 200) {
                  return sampleResponse.data.result;
                }
              } catch (error) {
                console.warn(
                  `‚ö†Ô∏è Could not fetch sample for kit ${kit.id}:`,
                  error
                );
              }
            }
            return null;
          });

          const sampleResults = await Promise.allSettled(samplePromises);
          samples = sampleResults
            .filter((result) => result.status === "fulfilled" && result.value)
            .map((result) => (result as PromiseFulfilledResult<Sample>).value);

          console.log("‚úÖ Samples loaded:", samples.length);
        }
      }

      const totalTime = Date.now() - startTime;
      console.log(`‚úÖ Complete order data assembled in ${totalTime}ms`);

      return {
        ...order,
        orderDetails,
        participants,
        appointment,
        sampleKits,
        samples,
      };
    } catch (error: any) {
      console.error("‚ùå Error fetching order data:", error);
      throw new Error(
        "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng: " +
          (error.response?.data?.message || error.message)
      );
    }
  }

  // ‚úÖ OPTIMIZED: Get user orders with better performance
  async getUserOrders(userId?: string): Promise<any[]> {
    try {
      const startTime = Date.now();
      console.log("üîç Fetching user orders...");

      let ordersData = [];

      if (userId) {
        console.log("üîç Fetching orders for user:", userId);
        const response = await apiClient.get(`/orders/user/${userId}`);
        ordersData = response.data.result || [];
      } else {
        console.log("üîç Fetching all orders for current user");
        const response = await apiClient.get(`/orders/all`);
        ordersData = response.data.result || [];
      }

      if (ordersData.length > 0) {
        const totalTime = Date.now() - startTime;
        console.log(`‚úÖ Orders loaded in ${totalTime}ms:`, ordersData.length);

        // ‚úÖ OPTIMIZED: Sort by most recent first
        const sortedOrders = ordersData.sort((a: any, b: any) => {
          const dateA = new Date(
            a.createdAt || a.created_at || a.createddate || 0
          );
          const dateB = new Date(
            b.createdAt || b.created_at || b.createddate || 0
          );
          return dateB.getTime() - dateA.getTime();
        });

        return sortedOrders;
      }

      return [];
    } catch (error: any) {
      console.error(
        "‚ùå Error fetching user orders:",
        error.response?.data || error.message
      );
      return [];
    }
  }

  // ‚úÖ V9 OPTIMIZED: Sample Kit methods
  async getSampleKitsByOrderId(orderId: string): Promise<SampleKit[]> {
    try {
      console.log("üîç Fetching sample kits for order:", orderId);
      const startTime = Date.now();

      // V9: Direct endpoint for kits by order
      const response = await apiClient.get(`/sample-kits/order/${orderId}`);

      if (response.data.code === 200) {
        const kits = response.data.result || [];
        const totalTime = Date.now() - startTime;
        console.log(`‚úÖ Sample kits loaded in ${totalTime}ms:`, kits.length);
        return kits;
      }

      return [];
    } catch (error: any) {
      console.error(
        "‚ùå Sample kits API failed:",
        error.response?.data || error.message
      );
      return [];
    }
  }

  async updateSampleKitStatus(
    kitId: string,
    status: string,
    updateData?: Partial<SampleKit>
  ): Promise<SampleKit | null> {
    try {
      console.log("üîÑ Updating sample kit status:", kitId, status);
      const startTime = Date.now();

      const response = await apiClient.put(`/sample-kits/${kitId}`, {
        status,
        ...updateData,
      });

      if (response.data.code === 200) {
        const totalTime = Date.now() - startTime;
        console.log(`‚úÖ Sample kit updated in ${totalTime}ms`);
        return response.data.result;
      }

      return null;
    } catch (error: any) {
      console.error(
        "‚ùå Error updating sample kit:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // ‚úÖ V9 OPTIMIZED: Sample methods
  async getSamplesByUserId(userId?: string): Promise<Sample[]> {
    try {
      const targetUserId = userId || this.getCurrentUserId();
      console.log("üîç Fetching samples for user:", targetUserId);
      const startTime = Date.now();

      const response = await apiClient.get(`/samples/user/${targetUserId}`);

      if (response.data.code === 200) {
        const samples = response.data.result || [];
        const totalTime = Date.now() - startTime;
        console.log(`‚úÖ Samples loaded in ${totalTime}ms:`, samples.length);
        return samples;
      }

      return [];
    } catch (error: any) {
      console.error(
        "‚ùå Samples API failed:",
        error.response?.data || error.message
      );
      return [];
    }
  }

  async updateSampleStatus(
    sampleId: string,
    status: string,
    updateData?: Partial<Sample>
  ): Promise<Sample | null> {
    try {
      console.log("üîÑ Updating sample status:", sampleId, status);
      const startTime = Date.now();

      const response = await apiClient.put(`/samples/${sampleId}`, {
        status,
        ...updateData,
      });

      if (response.data.code === 200) {
        const totalTime = Date.now() - startTime;
        console.log(`‚úÖ Sample updated in ${totalTime}ms`);
        return response.data.result;
      }

      return null;
    } catch (error: any) {
      console.error(
        "‚ùå Error updating sample:",
        error.response?.data || error.message
      );
      return null;
    }
  }

  // ‚úÖ OPTIMIZED: Appointment methods
  async getAllAppointments(): Promise<any[]> {
    try {
      console.log("üîç Fetching all appointments...");
      const startTime = Date.now();

      const response = await apiClient.get("/appointment/all");

      if (response.data.code === 200) {
        const appointments = response.data.result || [];
        const totalTime = Date.now() - startTime;
        console.log(
          `‚úÖ All appointments loaded in ${totalTime}ms:`,
          appointments.length
        );
        return appointments;
      }

      return [];
    } catch (error: any) {
      console.error(
        "‚ùå Error fetching all appointments:",
        error.response?.data || error.message
      );
      throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch h·∫πn");
    }
  }

  async getUserAppointments(): Promise<any[]> {
    try {
      console.log("üîç Fetching user appointments...");
      const startTime = Date.now();

      const response = await apiClient.get("/appointment/user/all");

      if (response.data.code === 200) {
        const appointments = response.data.result || [];
        const totalTime = Date.now() - startTime;
        console.log(
          `‚úÖ User appointments loaded in ${totalTime}ms:`,
          appointments.length
        );
        return appointments;
      }

      return [];
    } catch (error: any) {
      console.error(
        "‚ùå Error fetching user appointments:",
        error.response?.data || error.message
      );
      throw new Error("Kh√¥ng th·ªÉ t·∫£i l·ªãch h·∫πn c·ªßa b·∫°n");
    }
  }

  async getAppointmentsByOrderId(orderId: string): Promise<any[]> {
    try {
      console.log("üîç Fetching appointments for order:", orderId);

      // Try user appointments first (faster)
      const userAppointments = await this.getUserAppointments();
      const orderAppointments = userAppointments.filter(
        (app: any) => app.orderId === orderId
      );

      if (orderAppointments.length > 0) {
        console.log(
          `‚úÖ Found ${orderAppointments.length} appointments for order ${orderId}`
        );
        return orderAppointments;
      }

      // Fallback to all appointments if needed
      const allAppointments = await this.getAllAppointments();
      const fallbackAppointments = allAppointments.filter(
        (app: any) => app.orderId === orderId
      );

      console.log(
        `‚úÖ Found ${fallbackAppointments.length} appointments for order ${orderId} (fallback)`
      );
      return fallbackAppointments;
    } catch (error) {
      console.error("‚ùå Could not fetch appointments for order:", error);
      return [];
    }
  }

  // ‚úÖ OPTIMIZED: Progress calculation with caching
  private progressCache = new Map<
    string,
    { result: number; timestamp: number }
  >();

  calculateOrderProgress(
    order: any,
    sampleKits: any[] = [],
    samples: any[] = [],
    appointment: any = null
  ): number {
    const cacheKey = `${order.id || order.orderId}_${order.status}_${
      sampleKits.length
    }_${samples.length}_${!!appointment}`;
    const cached = this.progressCache.get(cacheKey);

    // Use cache if less than 30 seconds old
    if (cached && Date.now() - cached.timestamp < 30000) {
      return cached.result;
    }

    console.log(
      "üî¢ Calculating order progress for:",
      order.id || order.orderId
    );

    // Base progress from order status
    const statusInfo = this.getOrderStatusInfo(order.status);
    let baseProgress = statusInfo.progress;

    console.log(
      `üìä Base progress from status "${order.status}": ${baseProgress}%`
    );

    // Factor in sample kit progress
    let kitProgress = 0;
    if (sampleKits && sampleKits.length > 0) {
      const kitStatusMap: Record<string, number> = {
        ordered: 25,
        preparing: 30,
        shipped: 45,
        delivered: 55,
        ready: 50,
        expired: 0,
      };

      kitProgress =
        sampleKits.reduce((acc, kit) => {
          const progress = kitStatusMap[kit.status] || 0;
          return acc + progress;
        }, 0) / sampleKits.length;

      console.log(`üì¶ Average kit progress: ${kitProgress}%`);
    }

    // Factor in actual sample progress
    let sampleProgress = 0;
    if (samples && samples.length > 0) {
      const sampleStatusMap: Record<string, number> = {
        pending: 10,
        collected: 60,
        shipped: 70,
        received: 75,
        analyzing: 85,
        completed: 95,
        failed: 0,
      };

      sampleProgress =
        samples.reduce((acc, sample) => {
          const progress = sampleStatusMap[sample.status] || 0;
          return acc + progress;
        }, 0) / samples.length;

      console.log(`üß™ Average sample progress: ${sampleProgress}%`);
    }

    // Factor in appointment progress (for facility collection)
    let appointmentProgress = 0;
    if (appointment) {
      if (appointment.status === true || appointment.status === "confirmed") {
        appointmentProgress = 40;
      } else if (appointment.status === "completed") {
        appointmentProgress = 70;
      } else {
        appointmentProgress = 20;
      }
      console.log(`üìÖ Appointment progress: ${appointmentProgress}%`);
    }

    // Return the highest progress value (most advanced stage)
    const finalProgress = Math.max(
      baseProgress,
      kitProgress,
      sampleProgress,
      appointmentProgress
    );
    const result = Math.min(100, Math.max(0, finalProgress));

    // Cache result
    this.progressCache.set(cacheKey, { result, timestamp: Date.now() });

    console.log(`üéØ Final calculated progress: ${result}%`);
    return result;
  }

  // ‚úÖ Helper methods for status info
  getOrderStatusInfo(status: string) {
    const statusMap: Record<string, any> = {
      pending: {
        label: "Ch·ªù x·ª≠ l√Ω",
        color: "bg-yellow-100 text-yellow-800",
        icon: "Clock",
        description: "ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω",
        progress: 10,
      },
      confirmed: {
        label: "ƒê√£ x√°c nh·∫≠n",
        color: "bg-blue-100 text-blue-800",
        icon: "CheckCircle",
        description: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n",
        progress: 25,
      },
      kit_preparing: {
        label: "Chu·∫©n b·ªã kit",
        color: "bg-purple-100 text-purple-800",
        icon: "Package",
        description: "ƒêang chu·∫©n b·ªã b·ªô kit x√©t nghi·ªám",
        progress: 35,
      },
      kit_sent: {
        label: "ƒê√£ g·ª≠i kit",
        color: "bg-indigo-100 text-indigo-800",
        icon: "Truck",
        description: "Kit ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªãa ch·ªâ c·ªßa b·∫°n",
        progress: 50,
      },
      sample_collected: {
        label: "ƒê√£ thu m·∫´u",
        color: "bg-cyan-100 text-cyan-800",
        icon: "TestTube",
        description: "M·∫´u ƒë√£ ƒë∆∞·ª£c thu th·∫≠p",
        progress: 65,
      },
      sample_received: {
        label: "ƒê√£ nh·∫≠n m·∫´u",
        color: "bg-teal-100 text-teal-800",
        icon: "CheckCircle",
        description: "Ph√≤ng lab ƒë√£ nh·∫≠n ƒë∆∞·ª£c m·∫´u",
        progress: 75,
      },
      processing: {
        label: "ƒêang x·ª≠ l√Ω",
        color: "bg-orange-100 text-orange-800",
        icon: "RefreshCw",
        description: "ƒêang ti·∫øn h√†nh x√©t nghi·ªám",
        progress: 85,
      },
      completed: {
        label: "Ho√†n th√†nh",
        color: "bg-green-100 text-green-800",
        icon: "CheckCircle",
        description: "X√©t nghi·ªám ho√†n th√†nh, k·∫øt qu·∫£ ƒë√£ s·∫µn s√†ng",
        progress: 100,
      },
      cancelled: {
        label: "ƒê√£ h·ªßy",
        color: "bg-red-100 text-red-800",
        icon: "AlertCircle",
        description: "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy",
        progress: 0,
      },
    };
    return statusMap[status] || statusMap.pending;
  }

  getKitStatusInfo(status: string) {
    const statusMap: Record<string, any> = {
      ordered: {
        label: "ƒê√£ ƒë·∫∑t h√†ng",
        color: "bg-blue-100 text-blue-800",
        icon: "ShoppingCart",
        description: "Kit ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t h√†ng",
      },
      preparing: {
        label: "ƒêang chu·∫©n b·ªã",
        color: "bg-yellow-100 text-yellow-800",
        icon: "Package",
        description: "Kit ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã",
      },
      shipped: {
        label: "ƒê√£ g·ª≠i",
        color: "bg-blue-100 text-blue-800",
        icon: "Truck",
        description: "Kit ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒëi",
      },
      delivered: {
        label: "ƒê√£ giao",
        color: "bg-green-100 text-green-800",
        icon: "CheckCircle",
        description: "Kit ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng",
      },
      expired: {
        label: "H·∫øt h·∫°n",
        color: "bg-red-100 text-red-800",
        icon: "AlertCircle",
        description: "Kit ƒë√£ h·∫øt h·∫°n s·ª≠ d·ª•ng",
      },
      ready: {
        label: "S·∫µn s√†ng",
        color: "bg-green-100 text-green-800",
        icon: "CheckCircle",
        description: "Kit s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng",
      },
    };
    return statusMap[status] || statusMap.preparing;
  }

  getSampleStatusInfo(status: string) {
    const statusMap: Record<string, any> = {
      pending: {
        label: "Ch·ªù x·ª≠ l√Ω",
        color: "bg-yellow-100 text-yellow-800",
        icon: "Clock",
        description: "ƒêang ch·ªù x·ª≠ l√Ω",
      },
      collected: {
        label: "ƒê√£ thu m·∫´u",
        color: "bg-blue-100 text-blue-800",
        icon: "TestTube",
        description: "M·∫´u ƒë√£ ƒë∆∞·ª£c thu th·∫≠p",
      },
      shipped: {
        label: "ƒêang v·∫≠n chuy·ªÉn",
        color: "bg-purple-100 text-purple-800",
        icon: "Truck",
        description: "M·∫´u ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn v·ªÅ lab",
      },
      received: {
        label: "ƒê√£ nh·∫≠n",
        color: "bg-indigo-100 text-indigo-800",
        icon: "Building",
        description: "Lab ƒë√£ nh·∫≠n ƒë∆∞·ª£c m·∫´u",
      },
      analyzing: {
        label: "ƒêang ph√¢n t√≠ch",
        color: "bg-orange-100 text-orange-800",
        icon: "Microscope",
        description: "M·∫´u ƒëang ƒë∆∞·ª£c ph√¢n t√≠ch",
      },
      completed: {
        label: "Ho√†n th√†nh",
        color: "bg-green-100 text-green-800",
        icon: "CheckCircle",
        description: "Ph√¢n t√≠ch ho√†n th√†nh",
      },
      failed: {
        label: "Th·∫•t b·∫°i",
        color: "bg-red-100 text-red-800",
        icon: "AlertCircle",
        description: "M·∫´u kh√¥ng ƒë·∫°t ch·∫•t l∆∞·ª£ng",
      },
    };
    return statusMap[status] || statusMap.pending;
  }

  // ‚úÖ Clear cache when needed
  clearProgressCache(): void {
    this.progressCache.clear();
    console.log("üóëÔ∏è Progress cache cleared");
  }

  // ‚úÖ Get cache stats for debugging
  getCacheStats(): { size: number; keys: string[] } {
    return {
      size: this.progressCache.size,
      keys: Array.from(this.progressCache.keys()),
    };
  }
}

export const orderService = new OrderService();
