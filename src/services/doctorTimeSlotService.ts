import axios from "axios";

const API_BASE_URL = "https://dna-service-se1857.onrender.com/dna_service";

// Create axios instance
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 15000,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    console.log(`‚è∞ TimeSlot API Request: ${config.method?.toUpperCase()} ${config.url}`);
    
    // Add auth token if available
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('üîë Token attached:', token.substring(0, 20) + '...');
    } else {
      console.warn('‚ö†Ô∏è No token found in localStorage');
    }
    
    return config;
  },
  (error) => {
    console.error("‚ùå Request error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
apiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ TimeSlot API Response: ${response.status} ${response.statusText}`);
    console.log("üì• Response data:", response.data);
    return response;
  },
  (error) => {
    console.error("‚ùå TimeSlot API Response error:", error);
    
    // Handle token expiration
    if (error.response?.status === 401) {
      console.warn('üîí Token expired, redirecting to login');
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

// Doctor Time Slot interface matching API response
export interface DoctorTimeSlot {
  id: string;
  dayOfWeek: number;
  startTime: string;
  endTime: string;
  isAvailable: boolean;
  doctorId: string;
  createdAt: string;
  updatedAt?: string;
}

// Time Slot request interface for create/update
export interface TimeSlotRequest {
  dayOfWeek: number;
  startTime: string;
  endTime: string;
  isAvailable: boolean;
  doctorId: string;
}

// API Response interface
export interface ApiResponse<T> {
  code: number;
  message: string;
  result: T;
}

// Day of week mapping
export const DAY_OF_WEEK = {
  0: 'Ch·ªß nh·∫≠t',
  1: 'Th·ª© hai',
  2: 'Th·ª© ba', 
  3: 'Th·ª© t∆∞',
  4: 'Th·ª© nƒÉm',
  5: 'Th·ª© s√°u',
  6: 'Th·ª© b·∫£y'
} as const;

export const DAY_OPTIONS = [
  { value: 0, label: 'Ch·ªß nh·∫≠t' },
  { value: 1, label: 'Th·ª© hai' },
  { value: 2, label: 'Th·ª© ba' },
  { value: 3, label: 'Th·ª© t∆∞' },
  { value: 4, label: 'Th·ª© nƒÉm' },
  { value: 5, label: 'Th·ª© s√°u' },
  { value: 6, label: 'Th·ª© b·∫£y' }
];

// Doctor Time Slot Service
export const doctorTimeSlotService = {
  // Get all time slots
  getAllTimeSlots: async (): Promise<{ success: boolean; data?: DoctorTimeSlot[]; message: string }> => {
    try {
      console.log("‚è∞ Fetching all time slots...");
      
      const response = await apiClient.get<ApiResponse<DoctorTimeSlot[]>>("/doctor-time-slots");
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "L·∫•y danh s√°ch khung gi·ªù th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch khung gi·ªù",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get all time slots error:", error);
      return handleApiError(error);
    }
  },

  // Get time slots by doctor ID
  getTimeSlotsByDoctorId: async (doctorId: string): Promise<{ success: boolean; data?: DoctorTimeSlot[]; message: string }> => {
    try {
      console.log(`‚è∞ Fetching time slots for doctor ID: ${doctorId}...`);
      
      const response = await apiClient.get<ApiResponse<DoctorTimeSlot[]>>(`/doctor-time-slots/doctor/${doctorId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "L·∫•y danh s√°ch khung gi·ªù th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch khung gi·ªù",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get time slots by doctor ID error:", error);
      return handleApiError(error);
    }
  },

  // Get time slot by ID
  getTimeSlotById: async (timeSlotId: string): Promise<{ success: boolean; data?: DoctorTimeSlot; message: string }> => {
    try {
      console.log(`‚è∞ Fetching time slot with ID: ${timeSlotId}...`);
      
      const response = await apiClient.get<ApiResponse<DoctorTimeSlot>>(`/doctor-time-slots/${timeSlotId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "L·∫•y th√¥ng tin khung gi·ªù th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin khung gi·ªù",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get time slot by ID error:", error);
      return handleApiError(error);
    }
  },

  // Create new time slot
  createTimeSlot: async (timeSlotData: TimeSlotRequest): Promise<{ success: boolean; data?: DoctorTimeSlot; message: string }> => {
    try {
      console.log("‚ûï Creating new time slot...");
      console.log("üì§ Data being sent:", timeSlotData);

      // Validate required fields
      if (timeSlotData.dayOfWeek < 0 || timeSlotData.dayOfWeek > 6) {
        return { success: false, message: "Ng√†y trong tu·∫ßn kh√¥ng h·ª£p l·ªá (0-6)" };
      }
      if (!timeSlotData.startTime?.trim()) {
        return { success: false, message: "Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }
      if (!timeSlotData.endTime?.trim()) {
        return { success: false, message: "Gi·ªù k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }
      if (!timeSlotData.doctorId?.trim()) {
        return { success: false, message: "ID b√°c sƒ© kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" };
      }

      // Validate time format (HH:mm)
      const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (!timeRegex.test(timeSlotData.startTime)) {
        return { success: false, message: "Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (HH:mm)" };
      }
      if (!timeRegex.test(timeSlotData.endTime)) {
        return { success: false, message: "Gi·ªù k·∫øt th√∫c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (HH:mm)" };
      }

      // Validate start time < end time
      const startTime = new Date(`1970-01-01T${timeSlotData.startTime}:00`);
      const endTime = new Date(`1970-01-01T${timeSlotData.endTime}:00`);
      
      if (endTime <= startTime) {
        return { success: false, message: "Gi·ªù k·∫øt th√∫c ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu" };
      }
      
      const response = await apiClient.post<ApiResponse<DoctorTimeSlot>>("/doctor-time-slots", timeSlotData);
      
      if (response.data.code === 200 || response.data.code === 201) {
        return {
          success: true,
          data: response.data.result,
          message: "T·∫°o khung gi·ªù th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ t·∫°o khung gi·ªù",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Create time slot error:", error);
      return handleApiError(error);
    }
  },

  // Update time slot
  updateTimeSlot: async (timeSlotId: string, timeSlotData: Partial<TimeSlotRequest>): Promise<{ success: boolean; data?: DoctorTimeSlot; message: string }> => {
    try {
      console.log(`üìù Updating time slot with ID: ${timeSlotId}...`);
      console.log("üì§ Data being sent:", timeSlotData);
      
      // Validate inputs
      if (!timeSlotId || timeSlotId.trim() === '') {
        return {
          success: false,
          message: "ID khung gi·ªù kh√¥ng h·ª£p l·ªá"
        };
      }

      // Validate day of week if provided
      if (timeSlotData.dayOfWeek !== undefined && (timeSlotData.dayOfWeek < 0 || timeSlotData.dayOfWeek > 6)) {
        return { success: false, message: "Ng√†y trong tu·∫ßn kh√¥ng h·ª£p l·ªá (0-6)" };
      }

      // Validate time format if provided
      const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (timeSlotData.startTime && !timeRegex.test(timeSlotData.startTime)) {
        return { success: false, message: "Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (HH:mm)" };
      }
      if (timeSlotData.endTime && !timeRegex.test(timeSlotData.endTime)) {
        return { success: false, message: "Gi·ªù k·∫øt th√∫c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (HH:mm)" };
      }

      // Validate time order if both provided OR get existing values to validate
      if (timeSlotData.startTime || timeSlotData.endTime) {
        // We need to validate with existing values if only one is being updated
        // For now, we'll skip this validation in the service and let the frontend handle it
        // The frontend should send complete data for proper validation
      }
      
      const response = await apiClient.put<ApiResponse<DoctorTimeSlot>>(`/doctor-time-slots/${timeSlotId}`, timeSlotData);
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "C·∫≠p nh·∫≠t khung gi·ªù th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t khung gi·ªù",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Update time slot error:", error);
      return handleApiError(error);
    }
  },

  // Delete time slot
  deleteTimeSlot: async (timeSlotId: string): Promise<{ success: boolean; message: string }> => {
    try {
      console.log(`üóëÔ∏è Deleting time slot with ID: ${timeSlotId}...`);
      
      if (!timeSlotId || timeSlotId.trim() === '') {
        return {
          success: false,
          message: "ID khung gi·ªù kh√¥ng h·ª£p l·ªá"
        };
      }
      
      const response = await apiClient.delete<ApiResponse<any>>(`/doctor-time-slots/${timeSlotId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          message: "X√≥a khung gi·ªù th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ x√≥a khung gi·ªù",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Delete time slot error:", error);
      return handleApiError(error);
    }
  },
};

// Error handler helper
function handleApiError(error: any): { success: false; message: string } {
  if (error.response) {
    const status = error.response.status;
    const message = error.response.data?.message || error.response.statusText;

    switch (status) {
      case 400:
        return { success: false, message: `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${message}` };
      case 401:
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        return { success: false, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y" };
      case 403:
        return { success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y" };
      case 404:
        return { success: false, message: "Kh√¥ng t√¨m th·∫•y khung gi·ªù" };
      case 409:
        return { success: false, message: "Khung gi·ªù ƒë√£ t·ªìn t·∫°i" };
      case 500:
        return { success: false, message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau" };
      default:
        return { success: false, message: `L·ªói ${status}: ${message}` };
    }
  } else if (error.request) {
    return { success: false, message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server" };
  } else {
    return { success: false, message: `C√≥ l·ªói x·∫£y ra: ${error.message}` };
  }
}

export default doctorTimeSlotService;