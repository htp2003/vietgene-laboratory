import axios from "axios";

const API_BASE_URL = "https://dna-service-se1857.onrender.com/dna_service";

// Create axios instance
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 15000,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    console.log(`üîî Notification API Request: ${config.method?.toUpperCase()} ${config.url}`);
    
    // Add auth token if available
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    return config;
  },
  (error) => {
    console.error("‚ùå Notification request error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
apiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Notification API Response: ${response.status} ${response.statusText}`);
    return response;
  },
  (error) => {
    console.error("‚ùå Notification API Response error:", error);
    return Promise.reject(error);
  }
);

// Notification interface matching API
export interface Notification {
  id: string;
  title: string;
  message: string;
  type: string;
  is_read: boolean;
  userId: string;
  createdAt?: string;
  updatedAt?: string;
}

// API Response interface
export interface ApiResponse<T> {
  code: number;
  message: string;
  result: T;
}

// Notification Service
export const notificationService = {
  // Get all notifications for current user
  getAllNotifications: async (): Promise<{ success: boolean; data?: Notification[]; message: string }> => {
    try {
      console.log("üîî Fetching all notifications...");
      
      const response = await apiClient.get<ApiResponse<Notification[]>>("/notifications");
      
      if (response.data.code === 200) {
        // Transform and sort notifications
        const transformedData = response.data.result
          .map((notification: any) => ({
            ...notification,
            createdAt: notification.createdAt || new Date().toISOString(),
          }))
          .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());

        return {
          success: true,
          data: transformedData,
          message: "L·∫•y danh s√°ch th√¥ng b√°o th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch th√¥ng b√°o",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get all notifications error:", error);
      return handleApiError(error);
    }
  },

  // Get single notification by ID
  getNotificationById: async (notificationId: string): Promise<{ success: boolean; data?: Notification; message: string }> => {
    try {
      console.log(`üîî Fetching notification with ID: ${notificationId}...`);
      
      const response = await apiClient.get<ApiResponse<Notification>>(`/notifications/${notificationId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "L·∫•y th√¥ng b√°o th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get notification by ID error:", error);
      return handleApiError(error);
    }
  },

  // Mark notification as read
  markAsRead: async (notificationId: string): Promise<{ success: boolean; data?: Notification; message: string }> => {
    try {
      console.log(`‚úÖ Marking notification as read: ${notificationId}...`);
      
      const response = await apiClient.put<ApiResponse<Notification>>(`/notifications/${notificationId}`, {
        is_read: true
      });
      
      if (response.data.code === 200) {
        return {
          success: true,
          data: response.data.result,
          message: "ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Mark as read error:", error);
      return handleApiError(error);
    }
  },

  // Mark all notifications as read
  markAllAsRead: async (): Promise<{ success: boolean; message: string }> => {
    try {
      console.log("‚úÖ Marking all notifications as read...");
      
      // Get all unread notifications first
      const allNotifications = await notificationService.getAllNotifications();
      
      if (allNotifications.success && allNotifications.data) {
        const unreadNotifications = allNotifications.data.filter(n => !n.is_read);
        
        // Mark each unread notification as read
        const markPromises = unreadNotifications.map(notification => 
          notificationService.markAsRead(notification.id)
        );
        
        await Promise.all(markPromises);
        
        return {
          success: true,
          message: `ƒê√£ ƒë√°nh d·∫•u ${unreadNotifications.length} th√¥ng b√°o l√† ƒë√£ ƒë·ªçc`,
        };
      } else {
        return {
          success: false,
          message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch th√¥ng b√°o",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Mark all as read error:", error);
      return {
        success: false,
        message: "C√≥ l·ªói x·∫£y ra khi ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc",
      };
    }
  },

  // Delete notification
  deleteNotification: async (notificationId: string): Promise<{ success: boolean; message: string }> => {
    try {
      console.log(`üóëÔ∏è Deleting notification with ID: ${notificationId}...`);
      
      const response = await apiClient.delete<ApiResponse<any>>(`/notifications/${notificationId}`);
      
      if (response.data.code === 200) {
        return {
          success: true,
          message: "X√≥a th√¥ng b√°o th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Delete notification error:", error);
      return handleApiError(error);
    }
  },

  // Create notification (for admin)
  createNotification: async (notificationData: Partial<Notification>): Promise<{ success: boolean; data?: Notification; message: string }> => {
    try {
      console.log("‚ûï Creating new notification...");
      
      const response = await apiClient.post<ApiResponse<Notification>>("/notifications", notificationData);
      
      if (response.data.code === 200 || response.data.code === 201) {
        return {
          success: true,
          data: response.data.result,
          message: "T·∫°o th√¥ng b√°o th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          message: response.data.message || "Kh√¥ng th·ªÉ t·∫°o th√¥ng b√°o",
        };
      }
    } catch (error: any) {
      console.error("‚ùå Create notification error:", error);
      return handleApiError(error);
    }
  },

  // Get unread count
  getUnreadCount: async (): Promise<{ success: boolean; count: number; message: string }> => {
    try {
      const response = await notificationService.getAllNotifications();
      
      if (response.success && response.data) {
        const unreadCount = response.data.filter(n => !n.is_read).length;
        return {
          success: true,
          count: unreadCount,
          message: "L·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc th√†nh c√¥ng",
        };
      } else {
        return {
          success: false,
          count: 0,
          message: response.message,
        };
      }
    } catch (error: any) {
      console.error("‚ùå Get unread count error:", error);
      return {
        success: false,
        count: 0,
        message: "C√≥ l·ªói x·∫£y ra khi l·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc",
      };
    }
  },
};

// Error handler helper
function handleApiError(error: any): { success: false; message: string } {
  if (error.response) {
    const status = error.response.status;
    const message = error.response.data?.message || error.response.statusText;

    switch (status) {
      case 400:
        return { success: false, message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" };
      case 401:
        return { success: false, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng b√°o" };
      case 403:
        return { success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng b√°o n√†y" };
      case 404:
        return { success: false, message: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o" };
      case 500:
        return { success: false, message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau" };
      default:
        return { success: false, message: `L·ªói ${status}: ${message}` };
    }
  } else if (error.request) {
    return { success: false, message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server" };
  } else {
    return { success: false, message: `C√≥ l·ªói x·∫£y ra: ${error.message}` };
  }
}

export default notificationService;