import { apiClient } from '../../config/api';
import { ApiResponse, ApiDoctor, DoctorRequest, ApiDoctorTimeSlot, DoctorTimeSlotRequest } from '../../types/appointment'

export class DoctorService {
  
  // ‚úÖ Get all doctors
  static async getAllDoctors(): Promise<ApiDoctor[]> {
    try {
      console.log("üë®‚Äç‚öïÔ∏è Fetching all doctors...");
      
      const response = await apiClient.get<ApiResponse<ApiDoctor[]>>("/doctors");
      
      if (response.data.code === 200) {
        console.log("‚úÖ Fetched doctors:", response.data.result.length);
        return response.data.result;
      } else {
        console.warn("‚ö†Ô∏è Failed to fetch doctors:", response.data.message);
        return [];
      }
    } catch (error) {
      console.error("‚ùå Error fetching doctors:", error);
      return [];
    }
  }

  // ‚úÖ Get doctor by ID
  static async getDoctorById(doctorId: string): Promise<ApiDoctor | null> {
    try {
      console.log(`üë®‚Äç‚öïÔ∏è Fetching doctor ${doctorId}...`);
      
      const response = await apiClient.get<ApiResponse<ApiDoctor>>(`/doctors/${doctorId}`);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Fetched doctor:", response.data.result);
        return response.data.result;
      }
      
      return null;
    } catch (error) {
      console.warn(`Failed to fetch doctor ${doctorId}:`, error);
      return null;
    }
  }

  // ‚úÖ Create doctor
  static async createDoctor(doctorData: DoctorRequest): Promise<ApiDoctor | null> {
    try {
      console.log("üë®‚Äç‚öïÔ∏è Creating new doctor...");
      
      const response = await apiClient.post<ApiResponse<ApiDoctor>>("/doctors", doctorData);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Doctor created successfully");
        return response.data.result;
      }
      
      return null;
    } catch (error) {
      console.error("‚ùå Error creating doctor:", error);
      return null;
    }
  }

  // ‚úÖ Update doctor
  static async updateDoctor(doctorId: string, doctorData: DoctorRequest): Promise<boolean> {
    try {
      console.log(`üë®‚Äç‚öïÔ∏è Updating doctor ${doctorId}...`);
      
      const response = await apiClient.put(`/doctors/${doctorId}`, doctorData);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Doctor updated successfully");
        return true;
      }
      
      return false;
    } catch (error) {
      console.error("‚ùå Error updating doctor:", error);
      return false;
    }
  }

  // ‚úÖ Delete doctor
  static async deleteDoctor(doctorId: string): Promise<boolean> {
    try {
      console.log(`üë®‚Äç‚öïÔ∏è Deleting doctor ${doctorId}...`);
      
      const response = await apiClient.delete(`/doctors/${doctorId}`);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Doctor deleted successfully");
        return true;
      }
      
      return false;
    } catch (error) {
      console.error("‚ùå Error deleting doctor:", error);
      return false;
    }
  }

  // ‚úÖ Get all doctor time slots
  static async getAllDoctorTimeSlots(): Promise<ApiDoctorTimeSlot[]> {
    try {
      console.log("üïê Fetching all doctor time slots...");
      
      const response = await apiClient.get<ApiResponse<ApiDoctorTimeSlot[]>>("/doctor-time-slots");
      
      if (response.data.code === 200) {
        console.log("‚úÖ Fetched time slots:", response.data.result.length);
        return response.data.result;
      } else {
        console.warn("‚ö†Ô∏è Failed to fetch time slots:", response.data.message);
        return [];
      }
    } catch (error) {
      console.error("‚ùå Error fetching time slots:", error);
      return [];
    }
  }

  // ‚úÖ Get doctor time slot by ID
  static async getDoctorTimeSlot(slotId: string): Promise<ApiDoctorTimeSlot | null> {
    try {
      console.log(`üïê Fetching doctor time slot: ${slotId}`);
      
      const response = await apiClient.get<ApiResponse<ApiDoctorTimeSlot>>(`/doctor-time-slots/${slotId}`);
      
      if (response.data.code === 200) {
        return response.data.result;
      }
      
      return null;
    } catch (error) {
      console.warn(`Failed to fetch time slot ${slotId}:`, error);
      return null;
    }
  }

  // ‚úÖ Get time slots by doctor ID
  static async getDoctorTimeSlotsByDoctorId(doctorId: string): Promise<ApiDoctorTimeSlot[]> {
    try {
      console.log(`üïê Fetching time slots for doctor: ${doctorId}`);
      
      const response = await apiClient.get<ApiResponse<ApiDoctorTimeSlot[]>>(`/doctor-time-slots/doctor/${doctorId}`);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Fetched doctor time slots:", response.data.result.length);
        return response.data.result;
      } else {
        console.warn("‚ö†Ô∏è Failed to fetch doctor time slots:", response.data.message);
        return [];
      }
    } catch (error) {
      console.error("‚ùå Error fetching doctor time slots:", error);
      return [];
    }
  }

  // ‚úÖ Create doctor time slot
  static async createDoctorTimeSlot(timeSlotData: DoctorTimeSlotRequest): Promise<ApiDoctorTimeSlot | null> {
    try {
      console.log("üïê Creating doctor time slot...");
      
      const response = await apiClient.post<ApiResponse<ApiDoctorTimeSlot>>("/doctor-time-slots", timeSlotData);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Time slot created successfully");
        return response.data.result;
      }
      
      return null;
    } catch (error) {
      console.error("‚ùå Error creating time slot:", error);
      return null;
    }
  }

  // ‚úÖ Update doctor time slot
  static async updateDoctorTimeSlot(slotId: string, timeSlotData: DoctorTimeSlotRequest): Promise<boolean> {
    try {
      console.log(`üïê Updating time slot ${slotId}...`);
      
      const response = await apiClient.put(`/doctor-time-slots/${slotId}`, timeSlotData);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Time slot updated successfully");
        return true;
      }
      
      return false;
    } catch (error) {
      console.error("‚ùå Error updating time slot:", error);
      return false;
    }
  }

  // ‚úÖ Delete doctor time slot
  static async deleteDoctorTimeSlot(slotId: string): Promise<boolean> {
    try {
      console.log(`üïê Deleting time slot ${slotId}...`);
      
      const response = await apiClient.delete(`/doctor-time-slots/${slotId}`);
      
      if (response.data.code === 200) {
        console.log("‚úÖ Time slot deleted successfully");
        return true;
      }
      
      return false;
    } catch (error) {
      console.error("‚ùå Error deleting time slot:", error);
      return false;
    }
  }

  // ‚úÖ Helper function ƒë·ªÉ format time slot
  static formatTimeSlot(timeSlot: ApiDoctorTimeSlot): string {
    return `${timeSlot.startTime}-${timeSlot.endTime}`;
  }

  // ‚úÖ Helper function ƒë·ªÉ format day of week
  static formatDayOfWeek(dayOfWeek: number): string {
    const days = ['Ch·ªß Nh·∫≠t', 'Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞', 'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y'];
    return days[dayOfWeek] || 'N/A';
  }
}