// types/notification.ts
export interface NotificationRequest {
  title: string;
  message: string;
  type: NotificationType;
  is_read?: boolean;
}

export interface NotificationResponse {
  id: string;
  title: string;
  message: string;
  type: NotificationType;
  is_read: boolean;
  userId: string;
  createdAt?: string;
  updatedAt?: string;
}

export type NotificationType = 
  | 'Booking'           // New appointment created
  | 'StatusUpdate'      // Appointment status changed
  | 'UrgentBooking'     // Urgent appointment (legal DNA test)
  | 'AttentionRequired' // Appointment needs attention
  | 'Reminder'          // Upcoming appointment reminder
  | 'DailySummary'      // Daily appointment summary
  | 'SystemAlert'       // System-related alerts
  | 'TaskAssigned'      // Task assigned to staff
  | 'ResultReady';      // Test result ready

export interface NotificationStats {
  total: number;
  unread: number;
  byType: Record<NotificationType, number>;
  recent: NotificationResponse[];
}

export interface NotificationFilter {
  type?: NotificationType;
  isRead?: boolean;
  dateFrom?: string;
  dateTo?: string;
  limit?: number;
}

export interface NotificationPreferences {
  userId: string;
  enableSound: boolean;
  enableDesktop: boolean;
  enableEmail: boolean;
  notificationTypes: NotificationType[];
}

// Notification configuration for different types
export const NOTIFICATION_CONFIG = {
  'Booking': {
    icon: 'üìÖ',
    color: 'blue',
    priority: 'medium',
    autoRead: false
  },
  'StatusUpdate': {
    icon: 'üîÑ',
    color: 'orange',
    priority: 'medium',
    autoRead: false
  },
  'UrgentBooking': {
    icon: 'üö®',
    color: 'red',
    priority: 'high',
    autoRead: false
  },
  'AttentionRequired': {
    icon: '‚ö†Ô∏è',
    color: 'yellow',
    priority: 'high',
    autoRead: false
  },
  'Reminder': {
    icon: '‚è∞',
    color: 'purple',
    priority: 'low',
    autoRead: true
  },
  'DailySummary': {
    icon: 'üìä',
    color: 'green',
    priority: 'low',
    autoRead: true
  },
  'SystemAlert': {
    icon: '‚ö°',
    color: 'red',
    priority: 'high',
    autoRead: false
  },
  'TaskAssigned': {
    icon: 'üìã',
    color: 'blue',
    priority: 'medium',
    autoRead: false
  },
  'ResultReady': {
    icon: '‚úÖ',
    color: 'green',
    priority: 'high',
    autoRead: false
  }
} as const;

// Notification sound configuration
export const NOTIFICATION_SOUNDS = {
  'UrgentBooking': 'urgent-alert.mp3',
  'AttentionRequired': 'attention.mp3',
  'Booking': 'new-notification.mp3',
  'StatusUpdate': 'status-update.mp3',
  'ResultReady': 'result-ready.mp3'
} as const;

// Helper functions for notification handling
export const NotificationHelpers = {
  /**
   * Get notification config by type
   */
  getConfig: (type: NotificationType) => NOTIFICATION_CONFIG[type],

  /**
   * Get notification color class
   */
  getColorClass: (type: NotificationType): string => {
    const config = NOTIFICATION_CONFIG[type];
    const colorMap = {
      blue: 'text-blue-600 bg-blue-50',
      orange: 'text-orange-600 bg-orange-50',
      red: 'text-red-600 bg-red-50',
      yellow: 'text-yellow-600 bg-yellow-50',
      purple: 'text-purple-600 bg-purple-50',
      green: 'text-green-600 bg-green-50'
    };
    return colorMap[config.color] || colorMap.blue;
  },

  /**
   * Get notification priority badge
   */
  getPriorityBadge: (type: NotificationType): string => {
    const config = NOTIFICATION_CONFIG[type];
    const priorityMap = {
      high: 'bg-red-100 text-red-700',
      medium: 'bg-yellow-100 text-yellow-700',
      low: 'bg-gray-100 text-gray-700'
    };
    return priorityMap[config.priority];
  },

  /**
   * Check if notification should auto-read
   */
  shouldAutoRead: (type: NotificationType): boolean => {
    return NOTIFICATION_CONFIG[type].autoRead;
  },

  /**
   * Get notification sound
   */
  getSound: (type: NotificationType): string | undefined => {
    return NOTIFICATION_SOUNDS[type as keyof typeof NOTIFICATION_SOUNDS];
  },

  /**
   * Format notification message with customer name
   */
  formatMessage: (type: NotificationType, customerName: string, extra?: string): string => {
    const messageTemplates = {
      'Booking': `Kh√°ch h√†ng ${customerName} ƒë√£ ƒë·∫∑t l·ªãch x√©t nghi·ªám`,
      'StatusUpdate': `L·ªãch h·∫πn c·ªßa kh√°ch h√†ng ${customerName} ${extra || 'c√≥ c·∫≠p nh·∫≠t'}`,
      'UrgentBooking': `Kh√°ch h√†ng ${customerName} ƒë√£ ƒë·∫∑t l·ªãch x√©t nghi·ªám KH·∫®N C·∫§P`,
      'AttentionRequired': `L·ªãch h·∫πn c·ªßa kh√°ch h√†ng ${customerName} c·∫ßn ch√∫ √Ω: ${extra || 'c·∫ßn x·ª≠ l√Ω'}`,
      'Reminder': `L·ªãch h·∫πn c·ªßa kh√°ch h√†ng ${customerName} s·∫Øp t·ªõi`,
      'DailySummary': `T·ªïng k·∫øt l·ªãch h·∫πn trong ng√†y`,
      'SystemAlert': `C·∫£nh b√°o h·ªá th·ªëng: ${extra || 'c·∫ßn ki·ªÉm tra'}`,
      'TaskAssigned': `B·∫°n ƒë∆∞·ª£c giao nhi·ªám v·ª• x·ª≠ l√Ω l·ªãch h·∫πn c·ªßa ${customerName}`,
      'ResultReady': `K·∫øt qu·∫£ x√©t nghi·ªám c·ªßa kh√°ch h√†ng ${customerName} ƒë√£ s·∫µn s√†ng`
    };
    
    return messageTemplates[type] || `Th√¥ng b√°o v·ªÅ kh√°ch h√†ng ${customerName}`;
  }
};

export default NotificationHelpers;