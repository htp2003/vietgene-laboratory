// testResultTypes.ts
// ‚úÖ Additional types and enums for better type safety

export enum TestResultType {
  DNA_ANALYSIS = "DNA_ANALYSIS",
  GENETIC_SCREENING = "GENETIC_SCREENING",
  PATERNITY = "PATERNITY",
  ANCESTRY = "ANCESTRY",
  HEALTH_SCREENING = "HEALTH_SCREENING",
  PHARMACOGENOMICS = "PHARMACOGENOMICS",
  CARRIER_SCREENING = "CARRIER_SCREENING",
  CANCER_RISK = "CANCER_RISK",
  TRAIT_ANALYSIS = "TRAIT_ANALYSIS",
  NUTRITION = "NUTRITION",
  FITNESS = "FITNESS",
  WELLNESS = "WELLNESS",
}

export enum TestResultStatus {
  PENDING = "PENDING",
  IN_PROGRESS = "IN_PROGRESS",
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
  CANCELLED = "CANCELLED",
  REVIEWED = "REVIEWED",
}

export interface TestResultSummary {
  total: number;
  completed: number;
  pending: number;
  failed: number;
  byType: Record<TestResultType, number>;
}

export interface TestResultWithSample {
  testResult: TestResultResponse;
  sampleCode: string;
  sampleType: string;
  collectionDate: string;
  participantName?: string;
  participantRelationship?: string;
}

export interface TestResultFilter {
  userId?: string;
  sampleId?: string;
  resultType?: TestResultType;
  status?: TestResultStatus;
  dateFrom?: string;
  dateTo?: string;
  hasFile?: boolean;
}

export interface TestResultDisplayData {
  id: string;
  type: string;
  typeLabel: string;
  percentage: string;
  percentageValue: number;
  conclusion: string;
  detail: string;
  testedDate: string;
  testedDateFormatted: string;
  hasFile: boolean;
  fileName?: string;
  sampleId: string;
  userId: string;
  status: string;
  statusColor: string;
  icon: string;
}

// ‚úÖ Re-export interfaces from service
export type {
  TestResultRequest,
  TestResultResponse,
} from "../services/testResultService";

// ‚úÖ Constants for UI display
export const TEST_RESULT_TYPE_LABELS: Record<TestResultType, string> = {
  [TestResultType.DNA_ANALYSIS]: "Ph√¢n t√≠ch DNA",
  [TestResultType.GENETIC_SCREENING]: "S√†ng l·ªçc gen",
  [TestResultType.PATERNITY]: "X√©t nghi·ªám huy·∫øt th·ªëng",
  [TestResultType.ANCESTRY]: "D√≤ng t·ªôc",
  [TestResultType.HEALTH_SCREENING]: "S√†ng l·ªçc s·ª©c kh·ªèe",
  [TestResultType.PHARMACOGENOMICS]: "D∆∞·ª£c l√Ω gen",
  [TestResultType.CARRIER_SCREENING]: "S√†ng l·ªçc mang gen",
  [TestResultType.CANCER_RISK]: "Nguy c∆° ung th∆∞",
  [TestResultType.TRAIT_ANALYSIS]: "Ph√¢n t√≠ch ƒë·∫∑c ƒëi·ªÉm",
  [TestResultType.NUTRITION]: "Dinh d∆∞·ª°ng",
  [TestResultType.FITNESS]: "Th·ªÉ l·ª±c",
  [TestResultType.WELLNESS]: "S·ª©c kh·ªèe t·ªïng qu√°t",
};

export const TEST_RESULT_STATUS_LABELS: Record<TestResultStatus, string> = {
  [TestResultStatus.PENDING]: "Ch·ªù x·ª≠ l√Ω",
  [TestResultStatus.IN_PROGRESS]: "ƒêang x·ª≠ l√Ω",
  [TestResultStatus.COMPLETED]: "Ho√†n th√†nh",
  [TestResultStatus.FAILED]: "Th·∫•t b·∫°i",
  [TestResultStatus.CANCELLED]: "ƒê√£ h·ªßy",
  [TestResultStatus.REVIEWED]: "ƒê√£ xem x√©t",
};

export const TEST_RESULT_STATUS_COLORS: Record<TestResultStatus, string> = {
  [TestResultStatus.PENDING]: "bg-yellow-100 text-yellow-800",
  [TestResultStatus.IN_PROGRESS]: "bg-blue-100 text-blue-800",
  [TestResultStatus.COMPLETED]: "bg-green-100 text-green-800",
  [TestResultStatus.FAILED]: "bg-red-100 text-red-800",
  [TestResultStatus.CANCELLED]: "bg-gray-100 text-gray-800",
  [TestResultStatus.REVIEWED]: "bg-purple-100 text-purple-800",
};

export const TEST_RESULT_TYPE_ICONS: Record<TestResultType, string> = {
  [TestResultType.DNA_ANALYSIS]: "üß¨",
  [TestResultType.GENETIC_SCREENING]: "üî¨",
  [TestResultType.PATERNITY]: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
  [TestResultType.ANCESTRY]: "üå≥",
  [TestResultType.HEALTH_SCREENING]: "üè•",
  [TestResultType.PHARMACOGENOMICS]: "üíä",
  [TestResultType.CARRIER_SCREENING]: "üîç",
  [TestResultType.CANCER_RISK]: "‚ö†Ô∏è",
  [TestResultType.TRAIT_ANALYSIS]: "üìä",
  [TestResultType.NUTRITION]: "ü•ó",
  [TestResultType.FITNESS]: "üí™",
  [TestResultType.WELLNESS]: "‚ú®",
};
